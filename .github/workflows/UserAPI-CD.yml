# This is a basic workflow to help you get started with Actions

name: User Profile API CD

env:
  ACRNAME: openhackvs44eql7acr.azurecr.io
  ACRREPO: devopsoh/api-userprofile
  APPNAME: openhackvs44eql7userprofile
  HEALTHCHECK_STAGING: https://openhackvs44eql7userprofile-staging.azurewebsites.net/api/healthcheck/user
  HEALTHCHECK_PROD: https://openhackvs44eql7userprofile.azurewebsites.net/api/healthcheck/user
  
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths: [ apis/userprofile/**, .github/workflows/UserAPI-CD.yml ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
defaults: 
  run:  
    working-directory: apis/userprofile

jobs:
  build-and-push:
    if: "false"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        login-server: ${{ env.ACRNAME }}
      
    - name: Build the Docker image
      run: docker build --tag ${{ env.ACRNAME }}/${{ env.ACRREPO }}:${{ github.run_id }} .
      
    - name: Docker push
      run: docker push ${{ env.ACRNAME }}/${{ env.ACRREPO }}:${{ github.run_id }}

  deploy-to-staging:
    if: "false"
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:   
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZ_CREDS }}
      
    - name: Deploy to Azure Web App [Staging]
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APPNAME }}
        slot-name: staging # optional, default is production
        images: ${{ env.ACRNAME }}/${{ env.ACRREPO }}:${{ github.run_id }}

  validate-staging:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #needs: [ deploy-to-staging ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Validate Staging
        run: |
          echo "Checking endpoint"
          while [ true ]; do
             result=`curl -s -o /dev/null -w "%{http_code}" $HEALTHCHECK_STAGING`
             if [ -z $result ]; then
                echo "Status from healthcheck endpoint is empty!"
                exit 1
             fi
             echo "Status from healthcheck endpoint : $result"
             if [ $result == "200" ]; then
                echo "Web service in staging seems to be running OK!"
                break
             else
                echo "Web service is not ready, sleeping 5 seconds ..."
                sleep 5
             fi
          done

  validate-prod:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #needs: [ deploy-to-staging ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Validate Production
        run: |
          echo "Checking endpoint"
          while [ true ]; do
             result=`curl -s -o /dev/null -w "%{http_code}" $HEALTHCHECK_PROD`
             if [ -z $result ]; then
                echo "Status from healthcheck endpoint is empty!"
                exit 1
             fi
             echo "Status from healthcheck endpoint : $result"
             if [ $result == "200" ]; then
                echo "Web service in staging seems to be running OK!"
                break
             else
                echo "Web service is not ready, sleeping 5 seconds ..."
                sleep 5
             fi
          done