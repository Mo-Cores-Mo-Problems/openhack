# This is a basic workflow to help you get started with Actions

name: user-java-CD

env:
  ACRNAME: openhackvs44eql7acr.azurecr.io
  ACRREPO: devopsoh/api-user-java
  APPNAME: openhackvs44eql7userjava
  HEALTHCHECK_STAGING: https://openhackvs44eql7userprofile-staging.azurewebsites.net/api/healthcheck/user
  
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths: [ apis/user-java/**, .github/workflows/User-Java-CD.yml ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
defaults: 
  run:  
    working-directory: apis/user-java

jobs:
  
  build_push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        login-server: ${{ env.ACRNAME }}
      
    - name: Build the Docker image
      run: docker build --tag ${{ env.ACRNAME }}/${{ env.ACRREPO }}:${{ github.run_id }} .
      
    - name: Docker push
      run: docker push ${{ env.ACRNAME }}/${{ env.ACRREPO }}:${{ github.run_id }}
      
  deploy_azure:
    needs: [build_push]
    runs-on: ubuntu-latest

    steps:
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZ_CREDS }}
      
    - name: Azure Web App Staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APPNAME }}
        slot-name: staging
        images: ${{ env.ACRNAME }}/${{ env.ACRREPO }}:${{ github.run_id }}
        
  health-check:
    runs-on: ubuntu-latest

    steps:
    - name: Check HealthCheck Status
      run: |
        echo "Checking endpoint"
        declare url= ${{ env.HEALTHCHECK_STAGING }}
        # result=$(curl -w "%{http_code}" -i $url 2>/dev/null | grep HTTP/1.1)
        result=$(curl --write-out '%{http_code}' --silent --output /dev/null $url)
        sleep 5
        result=$(curl --write-out '%{http_code}' --silent --output /dev/null $url)
        echo $result
        for i in {1..5}
        do
            echo "Trying $i"
            if [ $result -eq 200 ] 
            then
                echo "Yay"
                exit 0
            else
                sleep 10
            fi
        done
        exit 1
        
    - name: Create Issue on Error
      if: ${{ failure() }}
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title:  "${{ env.build_name }} Build Failed: ${{ github.workflow }}",
            body: "Build Run Failed: ${{ github.run_number }} click here for logs https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          })
